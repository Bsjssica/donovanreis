import React, { useState } from 'react';
import { Marker, InfoWindow } from '@react-google-maps/api';
import { Map as MapIcon, AlertTriangle, Shield, Search } from 'lucide-react';
import MapContainer from './maps/MapContainer';
import { createMarkerIcon } from '../utils/mapUtils';

const VulnerabilityMap = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedArea, setSelectedArea] = useState<any>(null);
  const [mapLoaded, setMapLoaded] = useState(false);
  const [googleMaps, setGoogleMaps] = useState<typeof google.maps | null>(null);
  
  const vulnerableAreas = [
    {
      position: { lat: -22.8269, lng: -43.0539 },
      title: 'Zona Norte',
      risk: 'high',
      description: 'Área com histórico de alagamentos durante chuvas fortes.'
    },
    {
      position: { lat: -22.8169, lng: -43.0439 },
      title: 'Zona Industrial',
      risk: 'medium',
      description: 'Região com potencial de acidentes industriais.'
    },
    {
      position: { lat: -22.8369, lng: -43.0639 },
      title: 'Zona Central',
      risk: 'low',
      description: 'Área com boa infraestrutura e baixo risco de incidentes.'
    }
  ];

  const filteredAreas = vulnerableAreas.filter(area =>
    area.title.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const center = {
    lat: -22.8269,
    lng: -43.0539
  };

  const handleMapLoad = (map: google.maps.Map) => {
    setMapLoaded(true);
    setGoogleMaps(window.google.maps);
  };

  const getMarkerUrl = (risk: string) => {
    return risk === 'high' ? '/red-marker.png' :
           risk === 'medium' ? '/yellow-marker.png' :
           '/green-marker.png';
  };

  return (
    <div className="max-w-4xl mx-auto">
      <h2 className="text-3xl font-bold text-green-500 mb-8">
        Mapa de Vulnerabilidade Regional
      </h2>

      <div className="mb-6">
        <div className="relative">
          <input
            type="text"
            placeholder="Buscar área..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full px-4 py-2 pl-10 bg-gray-800 border border-gray-700 rounded-lg text-white focus:border-green-500 focus:ring-green-500"
          />
          <Search className="absolute left-3 top-2.5 h-5 w-5 text-gray-400" />
        </div>
      </div>

      <div className="bg-gray-800 rounded-lg p-6 mb-6">
        <MapContainer center={center} onLoad={handleMapLoad}>
          {mapLoaded && googleMaps && filteredAreas.map((area, index) => (
            <Marker
              key={index}
              position={area.position}
              onClick={() => setSelectedArea(area)}
              icon={createMarkerIcon(googleMaps, { 
                url: getMarkerUrl(area.risk),
                size: 30
              })}
            />
          ))}

          {selectedArea && (
            <InfoWindow
              position={selectedArea.position}
              onCloseClick={() => setSelectedArea(null)}
            >
              <div className="bg-white p-2 rounded">
                <h3 className="font-bold text-gray-900">{selectedArea.title}</h3>
                <p className="text-sm text-gray-600">{selectedArea.description}</p>
              </div>
            </InfoWindow>
          )}
        </MapContainer>
      </div>

      <div className="space-y-4">
        {filteredAreas.map((area, index) => (
          <div
            key={index}
            className={`p-4 bg-gray-900 rounded-lg border-l-4 ${
              area.risk === 'high' ? 'border-red-500' :
              area.risk === 'medium' ? 'border-yellow-500' :
              'border-green-500'
            }`}
          >
            <div className="flex items-center gap-2 mb-2">
              {area.risk === 'high' ? (
                <AlertTriangle className="h-5 w-5 text-red-500" />
              ) : area.risk === 'medium' ? (
                <AlertTriangle className="h-5 w-5 text-yellow-500" />
              ) : (
                <Shield className="h-5 w-5 text-green-500" />
              )}
              <h4 className="text-lg font-medium text-white">
                {area.title} - {area.risk === 'high' ? 'Risco Alto' :
                               area.risk === 'medium' ? 'Risco Médio' :
                               'Risco Baixo'}
              </h4>
            </div>
            <p className="text-gray-300">{area.description}</p>
          </div>
        ))}
      </div>
    </div>
  );
};

export default VulnerabilityMap;